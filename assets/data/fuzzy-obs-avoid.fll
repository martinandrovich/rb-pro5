#File: ObstacleAvoidance.fll
Engine: ObstacleAvoidance

InputVariable: obs_dist_right
  enabled: true
  range: 0.10 10
  lock-range: false
  term: close Ramp      3.000 1.000
  term: middle Triangle 1.000 3.000 6.000
  term: far Ramp        3.000 6.000

InputVariable: obs_dist_forward
  enabled: true
  range: 0.10 10
  lock-range: false
  term: close Ramp      3.000 1.000  
  term: middle Triangle 1.000 3.000 6.000
  term: far Ramp        3.000 6.000

InputVariable: obs_dist_left
  enabled: true
  range: 0.10 10
  lock-range: false
  term: close Ramp      3.000 1.000  
  term: middle Triangle 1.000 3.000 6.000
  term: far Ramp        3.000 6.000

OutputVariable: robot_dir
  enabled: true
  range: -0.4 0.4
  lock-range: false
  aggregation: Maximum
  defuzzifier: Centroid 100
  default: nan
  lock-previous: false
  term: left Ramp          0.000 -0.4000
  term: straight Triangle -0.2000 0.000 0.200
  term: right Ramp         0.000 -0.4000

OutputVariable: robot_speed
  enabled: true
  range: 0 1.200
  lock-range: false
  aggregation: Maximum
  defuzzifier: Centroid 100
  default: nan
  lock-previous: false
  term: stop Ramp       0.600 0.000
  term: normal Triangle 0.000 0.600 1.200
  term: fast Ramp       0.600 1.200  

RuleBlock: mamdani
  enabled: true
  conjunction: Minimum
  disjunction: none
  implication: AlgebraicProduct
  activation: General

  rule: if obs_dist_right is close and obs_dist_forward is close and obs_dist_left is close   then robot_dir is right     and robot_speed is stop
  rule: if obs_dist_right is close and obs_dist_forward is close and obs_dist_left is middle  then robot_dir is right     and robot_speed is stop
  rule: if obs_dist_right is close and obs_dist_forward is close and obs_dist_left is far     then robot_dir is right     and robot_speed is stop

  rule: if obs_dist_right is close and obs_dist_forward is middle and obs_dist_left is close  then robot_dir is straight  and robot_speed is normal
  rule: if obs_dist_right is close and obs_dist_forward is middle and obs_dist_left is middle then robot_dir is straight  and robot_speed is normal
  rule: if obs_dist_right is close and obs_dist_forward is middle and obs_dist_left is far    then robot_dir is straight  and robot_speed is normal

  rule: if obs_dist_right is close and obs_dist_forward is far and obs_dist_left is close     then robot_dir is straight  and robot_speed is fast
  rule: if obs_dist_right is close and obs_dist_forward is far and obs_dist_left is middle    then robot_dir is straight  and robot_speed is fast
  rule: if obs_dist_right is close and obs_dist_forward is far and obs_dist_left is far       then robot_dir is straight  and robot_speed is fast

  rule: if obs_dist_right is middle and obs_dist_forward is close and obs_dist_left is close  then robot_dir is left      and robot_speed is stop
  rule: if obs_dist_right is middle and obs_dist_forward is close and obs_dist_left is middle then robot_dir is left      and robot_speed is stop
  rule: if obs_dist_right is middle and obs_dist_forward is close and obs_dist_left is far    then robot_dir is left      and robot_speed is stop

  rule: if obs_dist_right is middle and obs_dist_forward is middle and obs_dist_left is close then robot_dir is straight  and robot_speed is normal
  rule: if obs_dist_right is middle and obs_dist_forward is middle and obs_dist_left is middle then robot_dir is straight and robot_speed is normal
  rule: if obs_dist_right is middle and obs_dist_forward is middle and obs_dist_left is far   then robot_dir is straight  and robot_speed is normal

  rule: if obs_dist_right is middle and obs_dist_forward is far and obs_dist_left is close    then robot_dir is straight  and robot_speed is fast
  rule: if obs_dist_right is middle and obs_dist_forward is far and obs_dist_left is middle   then robot_dir is straight  and robot_speed is fast
  rule: if obs_dist_right is middle and obs_dist_forward is far and obs_dist_left is far      then robot_dir is straight  and robot_speed is fast

  rule: if obs_dist_right is far and obs_dist_forward is close and obs_dist_left is close  then robot_dir is left         and robot_speed is stop
  rule: if obs_dist_right is far and obs_dist_forward is close and obs_dist_left is middle then robot_dir is left         and robot_speed is stop
  rule: if obs_dist_right is far and obs_dist_forward is close and obs_dist_left is far    then robot_dir is left         and robot_speed is stop

  rule: if obs_dist_right is far and obs_dist_forward is middle and obs_dist_left is close then robot_dir is straight     and robot_speed is normal
  rule: if obs_dist_right is far and obs_dist_forward is middle and obs_dist_left is middle then robot_dir is straight    and robot_speed is normal
  rule: if obs_dist_right is far and obs_dist_forward is middle and obs_dist_left is far   then robot_dir is straight     and robot_speed is normal

  rule: if obs_dist_right is far and obs_dist_forward is far and obs_dist_left is close    then robot_dir is straight     and robot_speed is fast
  rule: if obs_dist_right is far and obs_dist_forward is far and obs_dist_left is middle   then robot_dir is straight     and robot_speed is fast
  rule: if obs_dist_right is far and obs_dist_forward is far and obs_dist_left is far      then robot_dir is straight     and robot_speed is fast